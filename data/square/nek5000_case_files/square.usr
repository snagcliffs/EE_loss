c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      udiff =0.
      utrans=0.

      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ffx = 0.0 
      ffy = 0.0 
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      qvol   = 0.0
      source = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'

c     Use turb_outflow
      common /myoutflow/ d(lx1,ly1,lz1,lelt),m1(lx1*ly1*lz1,lelt)
      real m1
      rq = 2.0
      uin = 0.
      call turb_outflow(d,m1,rq,uin)

      if (istep.eq.0) time=0

c     Only write output every 1000th step after frist 100
c     This is so that the log file doesn't get too large
      nio = -1
      if (istep.le.100.or.mod(istep,1000).eq.0) nio=nid

c     Record forces / history points
      if (mod(istep,nint(uparam(1))).eq.0) then
            call write_stuff
      endif

      return
      end

c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions
c
c     NOTE ::: This subroutine MAY NOT be called by every process
c
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux = 1.0
      uy = 0.0
      uz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

c     Start with slightly assymetric IC to trigger vortex shedding
      ux=(1.0 + 0.01*Sin(y)*(1-Tanh(5*(x*x+y*y-1))))*
     $   Tanh(100*(x*x+y*y-0.25))
      uy=0.0
      uz=0.0
      temp=0

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'

      ntot = nx1*ny1*nz1*nelt

c     Set boundary conditions
      call setbc(1,1,'v  ') ! inflow
      call setbc(2,1,'O  ') ! outflow
      call setbc(3,1,'SYM') ! lateral farfield
      call setbc(4,1,'W  ') ! wall

      ifto=.true.        ! write vorticity in temperature field 
      
      return
      end

c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'
c
      return
      end
c----------------------------------------------------------------------

      subroutine write_stuff
      include 'SIZE'
      include 'TOTAL'

      real x0(3)
      save x0
      data x0 /3*0/

      integer bIDs(1), iobj_wall(1)

      parameter (lt=lx1*ly1*lz1*lelv)
      common /scrns/ vort(lt,3), w1(lt), w2(lt)

c     Format for writing force coefficients to file
      character(len=60) :: fmt  ! Format for writing lift coefficients
      fmt = "(f9.3, TR4, f9.6, TR4, f9.6, TR4, f9.6:)"

c     define objects for surface integrals (for aerodynamic coefficients)
      if (istep.eq.0) then
         bIDs(1) = 4   ! Line 4 is the airfoil
         call create_obj(iobj_wall(1),bIDs,1)
         open(12, file = 'forceCoeffs.dat', access = 'append')  
      endif 

c     Compute lift/drag coefficients on the cylinder
      scale = 2.0  ! Cd = F/(.5 rho U^2 )
      call torque_calc(scale,x0,.true.,.true.)
      write(12,fmt) time, dragx(1), dragy(1), torqz(1)
      
c     Compute vorticity
      n = nx1*ny1*nz1*nelv
      k = 1
      call comp_vort3(vort, w1, w2, vx, vy, vz)

      if (istep.eq.0) then
c        On initial step, save mass to temperature field
         call copy (t,bm1,n)
         call outpost(vx,vy,vz,pr,t,'   ')
      else
c        Otherwise save vorticity to temperature field
         call copy (t(1,1,1,1,k),vort,n)
      endif

c     Save field values at history points
      call hpts()

      return
      end

c-----------------------------------------------------------------------
